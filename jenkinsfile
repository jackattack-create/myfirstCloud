pipeline {
    agent {
        kubernetes {
            label 'k8s-agent'
            yamlFile 'kubernetes/k8s-pod.yaml'
        }
    }
    stages {
        stage ('AWS auth') {
            steps {
                script {
                    // Set your AWS cluster name and region
                    def clusterName = 'myFirstAWSCluster'
                    def clusterRegion = 'us-east-2'

                    withCredentials([aws(credentialsId: 'my-aws-credentials', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                        def clusterStatus = sh(returnStdout: true, script: '''
                            export AWS_ACCESS_KEY_ID
                            export AWS_SECRET_ACCESS_KEY

                            aws eks describe-cluster --name ${clusterName} --region ${clusterRegion} --query 'cluster.status' --output text
                        ''').trim()

                        // Check if the cluster status is 'ACTIVE'
                        if (clusterStatus == 'ACTIVE') {
                            echo "Kubernetes cluster is available and accessible."
                        } else {
                            echo "Kubernetes cluster is not available or not configured properly. Current status: ${clusterStatus}"
                        }
                    }
                }
            }
        }
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    docker.build('jackattack123/dockerprac:latest')
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'your-docker-credentials-id') {
                        docker.image('jackattack123/dockerprac:latest').push()
                    }
                }
            }
        }
        stage('Deploy to Kubernetes') {
            steps {
                withCredentials([file(credentialsId: '1', variable: 'KUBECONFIG')]) {
                    sh 'kubectl apply -f kubernetes/deployment.yaml --kubeconfig $KUBECONFIG'
                }
            }
        }
    }
}